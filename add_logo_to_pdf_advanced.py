#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–æ—Ç–∏–ø—ã –≤ —É–≥–ª–∞—Ö
- –®–∏—Ä–æ–∫–∏–π –±–∞–Ω–Ω–µ—Ä –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —á–µ—Ç–Ω—ã—Ö/–Ω–µ—á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python add_logo_to_pdf_advanced.py [options]

–ê–≤—Ç–æ—Ä: AI Assistant
–¢—Ä–µ–±—É–µ—Ç: pip install pymupdf
"""

import sys
import os
import argparse
import pymupdf  # PyMuPDF


class PDFLogoAdder:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF"""

    def __init__(self, input_pdf, output_pdf):
        self.input_pdf = input_pdf
        self.output_pdf = output_pdf
        self.doc = None
        self.total_pages = 0

    def open_document(self):
        """–û—Ç–∫—Ä—ã—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç"""
        if not os.path.exists(self.input_pdf):
            raise FileNotFoundError(f"–§–∞–π–ª {self.input_pdf} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        print(f"üìÑ –û—Ç–∫—Ä—ã–≤–∞—é PDF: {self.input_pdf}")
        self.doc = pymupdf.open(self.input_pdf)
        self.total_pages = self.doc.page_count
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {self.total_pages}")

    def close_document(self):
        """–ó–∞–∫—Ä—ã—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é PDF: {self.output_pdf}")
        self.doc.save(self.output_pdf)
        self.doc.close()

        output_size = os.path.getsize(self.output_pdf) / (1024 * 1024)
        print()
        print("="*60)
        print("‚úÖ –ì–û–¢–û–í–û!")
        print("="*60)
        print(f"üì¶ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {self.output_pdf}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_size:.2f} MB")
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {self.total_pages}")
        print("="*60)

    def add_corner_logo(self, logo_path, position='bottom-right', size=50, margin=15):
        """
        –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –≤ —É–≥–æ–ª –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö

        Args:
            logo_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            position: bottom-right, bottom-left, top-right, top-left
            size: —Ä–∞–∑–º–µ—Ä –≤ –ø—É–Ω–∫—Ç–∞—Ö
            margin: –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è
        """
        print(f"\nüñºÔ∏è  –†–µ–∂–∏–º: –õ–æ–≥–æ—Ç–∏–ø –≤ —É–≥–ª—É")
        print(f"üìç –ü–æ–∑–∏—Ü–∏—è: {position}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {size} –ø—É–Ω–∫—Ç–æ–≤")

        pixmap = self._load_image(logo_path)
        img_width, img_height = self._calculate_size(pixmap, size)

        for page_num in range(self.total_pages):
            page = self.doc[page_num]
            page_rect = page.rect

            x, y = self._get_corner_position(
                page_rect, position, img_width, img_height, margin
            )

            target_rect = pymupdf.Rect(x, y, x + img_width, y + img_height)
            page.insert_image(target_rect, pixmap=pixmap, overlay=True)

            print(f"  ‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}/{self.total_pages}")

        pixmap = None

    def add_footer_banner(self, banner_path, height=30, margin=5):
        """
        –î–æ–±–∞–≤–∏—Ç—å —à–∏—Ä–æ–∫–∏–π –±–∞–Ω–Ω–µ—Ä –≤–Ω–∏–∑—É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        Args:
            banner_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –±–∞–Ω–Ω–µ—Ä–∞
            height: –≤—ã—Å–æ—Ç–∞ –±–∞–Ω–Ω–µ—Ä–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö
            margin: –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
        """
        print(f"\nüé® –†–µ–∂–∏–º: –®–∏—Ä–æ–∫–∏–π –±–∞–Ω–Ω–µ—Ä –≤–Ω–∏–∑—É")
        print(f"üìè –í—ã—Å–æ—Ç–∞ –±–∞–Ω–Ω–µ—Ä–∞: {height} –ø—É–Ω–∫—Ç–æ–≤ (~{height*0.35:.1f} –º–º)")

        pixmap = self._load_image(banner_path)

        for page_num in range(self.total_pages):
            page = self.doc[page_num]
            page_rect = page.rect

            # –ë–∞–Ω–Ω–µ—Ä –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∏–Ω—É—Å –æ—Ç—Å—Ç—É–ø—ã
            banner_width = page_rect.width - (margin * 2)
            banner_height = height

            x = margin
            y = page_rect.height - banner_height - margin

            target_rect = pymupdf.Rect(x, y, x + banner_width, y + banner_height)
            page.insert_image(target_rect, pixmap=pixmap, overlay=True)

            print(f"  ‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}/{self.total_pages}")

        pixmap = None

    def add_alternating_logos(self, logo_left, logo_right, size=50, margin=15):
        """
        –ß–µ—Ä–µ–¥–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –Ω–µ—á–µ—Ç–Ω—ã—Ö/—á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö

        –ù–µ—á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1, 3, 5...): logo_left –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        –ß–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (2, 4, 6...): logo_right –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É

        Args:
            logo_left: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ (–Ω–µ—á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            logo_right: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ —É–≥–ª–∞ (—á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            size: —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞
            margin: –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è
        """
        print(f"\nüîÑ –†–µ–∂–∏–º: –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print(f"üìè –†–∞–∑–º–µ—Ä: {size} –ø—É–Ω–∫—Ç–æ–≤")
        print(f"üìÑ –ù–µ—á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1,3,5...): {os.path.basename(logo_left)} ‚Üí –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π")
        print(f"üìÑ –ß–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (2,4,6...): {os.path.basename(logo_right)} ‚Üí –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π")

        pixmap_left = self._load_image(logo_left)
        pixmap_right = self._load_image(logo_right)

        img_width_left, img_height_left = self._calculate_size(pixmap_left, size)
        img_width_right, img_height_right = self._calculate_size(pixmap_right, size)

        for page_num in range(self.total_pages):
            page = self.doc[page_num]
            page_rect = page.rect

            # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å 1 (page_num + 1)
            page_number = page_num + 1

            if page_number % 2 == 1:  # –ù–µ—á–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                # –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                x = margin
                y = page_rect.height - img_height_left - margin
                img_width = img_width_left
                img_height = img_height_left
                pixmap = pixmap_left
                position_text = "–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π"
            else:  # –ß–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                # –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                x = page_rect.width - img_width_right - margin
                y = page_rect.height - img_height_right - margin
                img_width = img_width_right
                img_height = img_height_right
                pixmap = pixmap_right
                position_text = "–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π"

            target_rect = pymupdf.Rect(x, y, x + img_width, y + img_height)
            page.insert_image(target_rect, pixmap=pixmap, overlay=True)

            print(f"  ‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}/{self.total_pages} ({position_text})")

        pixmap_left = None
        pixmap_right = None

    def _load_image(self, image_path):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")

        try:
            pixmap = pymupdf.Pixmap(image_path)
            print(f"  üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(image_path)} ({pixmap.width}x{pixmap.height} px)")
            return pixmap
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")

    def _calculate_size(self, pixmap, target_size):
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
        aspect_ratio = pixmap.width / pixmap.height
        if aspect_ratio > 1:
            width = target_size
            height = target_size / aspect_ratio
        else:
            height = target_size
            width = target_size * aspect_ratio
        return width, height

    def _get_corner_position(self, page_rect, position, img_width, img_height, margin):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–≥–ª–∞"""
        positions = {
            'bottom-right': (page_rect.width - img_width - margin, 
                           page_rect.height - img_height - margin),
            'bottom-left': (margin, 
                          page_rect.height - img_height - margin),
            'top-right': (page_rect.width - img_width - margin, 
                        margin),
            'top-left': (margin, margin)
        }

        if position not in positions:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {position}. "
                           f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(positions.keys())}")

        return positions[position]


def main():
    parser = argparse.ArgumentParser(
        description='–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü–†–ò–ú–ï–†–´:

  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
  python %(prog)s input.pdf output.pdf --corner logo.png --position bottom-right

  # –®–∏—Ä–æ–∫–∏–π –±–∞–Ω–Ω–µ—Ä –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  python %(prog)s input.pdf output.pdf --footer-banner banner.png --height 40

  # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ—á–µ—Ç–Ω—ã–µ/—á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  python %(prog)s input.pdf output.pdf --alternating logo1.png logo2.png

  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: –±–∞–Ω–Ω–µ—Ä + –ª–æ–≥–æ—Ç–∏–ø
  python %(prog)s input.pdf output.pdf --footer-banner banner.png --corner logo.png

  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: —á–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è + –±–∞–Ω–Ω–µ—Ä
  python %(prog)s input.pdf output.pdf --alternating logo1.png logo2.png --footer-banner banner.png
        """
    )

    parser.add_argument('input_pdf', help='–í—Ö–æ–¥–Ω–æ–π PDF —Ñ–∞–π–ª')
    parser.add_argument('output_pdf', help='–í—ã—Ö–æ–¥–Ω–æ–π PDF —Ñ–∞–π–ª')

    # –†–µ–∂–∏–º—ã
    parser.add_argument('--corner', metavar='IMAGE', 
                       help='–õ–æ–≥–æ—Ç–∏–ø –≤ —É–≥–ª—É –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö')
    parser.add_argument('--position', default='bottom-right',
                       choices=['bottom-right', 'bottom-left', 'top-right', 'top-left'],
                       help='–ü–æ–∑–∏—Ü–∏—è —É–≥–ª–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: bottom-right)')
    parser.add_argument('--size', type=int, default=50,
                       help='–†–∞–∑–º–µ—Ä —É–≥–ª–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')

    parser.add_argument('--footer-banner', metavar='IMAGE',
                       help='–®–∏—Ä–æ–∫–∏–π –±–∞–Ω–Ω–µ—Ä –≤–Ω–∏–∑—É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    parser.add_argument('--banner-height', type=int, default=30,
                       help='–í—ã—Å–æ—Ç–∞ –±–∞–Ω–Ω–µ—Ä–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')

    parser.add_argument('--alternating', nargs=2, metavar=('LEFT_IMG', 'RIGHT_IMG'),
                       help='–ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ—á–µ—Ç–Ω—ã–µ(–ª–µ–≤—ã–π —É–≥–æ–ª) —á–µ—Ç–Ω—ã–µ(–ø—Ä–∞–≤—ã–π —É–≥–æ–ª)')
    parser.add_argument('--alt-size', type=int, default=50,
                       help='–†–∞–∑–º–µ—Ä —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')

    parser.add_argument('--margin', type=int, default=15,
                       help='–û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è –≤ –ø—É–Ω–∫—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15)')

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω
    if not (args.corner or args.footer_banner or args.alternating):
        parser.error('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º: --corner, --footer-banner –∏–ª–∏ --alternating')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: corner –∏ alternating –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã
    if args.corner and args.alternating:
        parser.error('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --corner –∏ --alternating –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ')

    try:
        adder = PDFLogoAdder(args.input_pdf, args.output_pdf)
        adder.open_document()

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º—ã
        if args.alternating:
            adder.add_alternating_logos(
                args.alternating[0], 
                args.alternating[1],
                size=args.alt_size,
                margin=args.margin
            )
        elif args.corner:
            adder.add_corner_logo(
                args.corner,
                position=args.position,
                size=args.size,
                margin=args.margin
            )

        if args.footer_banner:
            adder.add_footer_banner(
                args.footer_banner,
                height=args.banner_height,
                margin=args.margin
            )

        adder.close_document()

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()
